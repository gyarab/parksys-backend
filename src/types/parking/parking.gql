## PARKING SESSION TYPES

type Check {
  time: DateTime!
  image: URL
}

type ParkingSession {
  id: ID!
  active: Boolean!
  checkIn: Check!
  checkOut: Check
  vehicle: Vehicle!
  appliedRules: [ParkingRule!]!
  finalFee: NonNegativeInt
}

## PARKING RULE TYPES

# ParkingRuleGroup (not yet) and all implementations of ParkingRule
union ParkingRuleSelector = ParkingRulePermitAccess | ParkingRuleTimedFee

enum VehicleFilterAction {
  EXCLUDE
  INCLUDE
}

# Filter for ParkingRules.
type VehicleFilter {
  id: ID!
  name: String!
  action: VehicleFilterAction!
  vehicles: [Vehicle!]!
}

input VehicleFilterCreateInput {
  name: String!
  action: VehicleFilterAction!
  vehicles: [ID!]
}

input VehicleFilterUpdateInput {
  name: String
  action: VehicleFilterAction
  vehicles: [ID!]
}

enum VehicleFilterMode {
  ALL
  NONE
}

interface ParkingRule {
  id: ID!
  name: String!
}

enum ParkingTimeUnit {
  MINUTE
  HOUR
}

type ParkingRuleTimedFee implements ParkingRule {
  id: ID!
  name: String!
  centsPerUnitTime: NonNegativeInt!
  unitTime: ParkingTimeUnit!
}

type ParkingRulePermitAccess implements ParkingRule {
  id: ID!
  name: String!
  permit: Boolean!
}

input ParkingRulePermitAccessCreateInput {
  name: String!
  permit: Boolean!
}

input ParkingRulePermitAccessUpdateInput {
  name: String
  permit: Boolean
}

## PARKING RULE ASSIGNMENT TYPES

type ParkingRuleAssignment {
  id: ID!
  rules: [ParkingRule]!
  start: DateTime!
  end: DateTime!
  active: Boolean!
  vehicleFilterMode: VehicleFilterMode!
  vehicleFilters: [VehicleFilter!]
  priority: NonNegativeInt!
}

input DateFilter {
  lte: DateTime
  lt: DateTime
  gte: DateTime
  gt: DateTime
}

input ParkingRuleAssignmentFilter {
  id: ID
  vehicleFilterMode: VehicleFilterMode
  startFilter: DateFilter
  endFilter: DateFilter
  # TODO: Solve array matching
  # TODO: Solve gt, lt, gte, lte with dates
}

input ParkingRuleAssignmentCreateInput {
  rules: [ID!]!
  start: DateTime!
  end: DateTime!
  vehicleFilterMode: VehicleFilterMode!
  vehicleFilters: [ID!]
  priority: NonNegativeInt!
  # Default false
  active: Boolean
}

input ParkingRuleAssignmentUpdateInput {
  rules: [ID!]
  start: DateTime
  end: DateTime
  vehicleFilterMode: VehicleFilterMode
  vehicleFilters: [ID!]
  priority: NonNegativeInt
  active: Boolean
}

## QUERIES & MUTATIONS

type ParkingRuleAssignmentApplication {
  start: DateTime!
  end: DateTime!
  assignment: ParkingRuleAssignment!
}

type ParkingRuleAssignmentResultError {
  collisions: [ParkingRuleAssignment!]!
}

union ParkingRuleAssignmentResult =
    ParkingRuleAssignment
  | ParkingRuleAssignmentResultError

input VehicleFilterSearchInput {
  name: String!
  limit: PositiveInt
  page: PositiveInt
}

type VehicleFilterSearchResult {
  data: [VehicleFilter!]
  page: PositiveInt!
  limit: PositiveInt!
}

input ParkingRuleSearchInput {
  name: String!
  limit: PositiveInt
  page: PositiveInt
}

type ParkingRuleSearchResult {
  data: [ParkingRule!]
  page: PositiveInt!
  limit: PositiveInt!
}

extend type Query {
  parkingRules: [ParkingRule!]
  vehicleFilters: [VehicleFilter!]
  parkingRuleAssignments(
    filter: ParkingRuleAssignmentFilter
  ): [ParkingRuleAssignment!]
  simulateRuleAssignmentApplication(
    vehicle: ID!
    start: DateTime!
    end: DateTime!
  ): [ParkingRuleAssignmentApplication!]

  vehicleFilterSearch(
    search: VehicleFilterSearchInput!
  ): VehicleFilterSearchResult!
  parkingRuleSearch(search: ParkingRuleSearchInput!): ParkingRuleSearchResult!
}

extend type Mutation {
  createVehicleFilter(input: VehicleFilterCreateInput!): VehicleFilter!
  updateVehicleFilter(id: ID!, input: VehicleFilterUpdateInput!): VehicleFilter!
  deleteVehicleFilter(id: ID!): VehicleFilter!
}

enum ParkingRuleType {
  ParkingRulePermitAccess
  ParkingRuleTimedFee
}

input ParkingRuleCreateInput {
  name: String!
  _t: ParkingRuleType!
  permit: Boolean
  centsPerUnitTime: NonNegativeInt
  unitTime: ParkingTimeUnit
}

type DeleteResult {
  id: ID
}

input ParkingRuleUpdateInput {
  name: String
  _t: ParkingRuleType
  permit: Boolean
  centsPerUnitTime: NonNegativeInt
  unitTime: ParkingTimeUnit
}

extend type Mutation {
  createParkingRule(input: ParkingRuleCreateInput!): ParkingRule!
  updateParkingRule(id: ID!, input: ParkingRuleUpdateInput!): ParkingRule!
  deleteParkingRule(id: ID!): DeleteResult!
}

extend type Mutation {
  createParkingRuleAssignment(
    input: ParkingRuleAssignmentCreateInput!
  ): ParkingRuleAssignmentResult!
  updateParkingRuleAssignment(
    id: ID!
    input: ParkingRuleAssignmentUpdateInput!
  ): ParkingRuleAssignmentResult!
  deleteParkingRuleAssignment(id: ID!): ParkingRuleAssignment!
}

input ParkingSessionFilter {
  id: ID
  active: Boolean
  vehicle: ID
}

extend type Query {
  parkingSessions(filter: ParkingSessionFilter): [ParkingSession!]!
}
