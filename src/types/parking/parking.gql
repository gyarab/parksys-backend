type Check {
  time: DateTime!
  image: URL
}

type ParkingSession {
  id: ID!
  active: Boolean!
  checkIn: Check!
  checkOut: Check
  vehicle: Vehicle!
  appliedRules: [ParkingRule!]!
  finalFee: NonNegativeInt
}

# ParkingRuleGroup (not yet) and all implementations of ParkingRule
union ParkingRuleSelector = ParkingRulePermitAccess | ParkingRuleTimedFee

enum VehicleFilterAction {
  EXCLUDE
  INCLUDE
}

# Filter for ParkingRules.
type VehicleFilter {
  id: ID!
  name: String!
  action: VehicleFilterAction!
  vehicles: [Vehicle!]!
}

input VehicleFilterCreateInput {
  name: String!
  action: VehicleFilterAction!
  vehicles: [ID!]
}

input VehicleFilterUpdateInput {
  name: String
  action: VehicleFilterAction
  addVehicles: [ID!]
  removeVehicles: [ID!]
}

enum VehicleSelectorEnum {
  ALL
  NONE
}

# Wrapper around VehicleSelectorEnum.
type VehicleSelectorSingleton {
  value: VehicleSelectorEnum!
}

union VehicleSelector = VehicleFilter | VehicleSelectorSingleton

interface ParkingRule {
  id: ID!
  name: String!
  vehicles: [VehicleSelector!]!
}

# TODO: Solve periodic assignments
type ParkingRuleAssignment {
  rule: ParkingRule!
  from: DateTime
  until: DateTime
  """
  Relationships form a tree.
  """
  hasLowerPriorityThan: [ParkingRuleSelector!]!
  """
  Relationships form a tree.
  """
  hasHigherPriorityThan: [ParkingRuleSelector!]!
}

enum ParkingTimeUnit {
  MINUTE
  HOUR
}

type ParkingRuleTimedFee implements ParkingRule {
  id: ID!
  name: String!
  vehicles: [VehicleSelector!]!
  centsPerUnitTime: NonNegativeInt!
  unitTime: ParkingTimeUnit!
}

type ParkingRulePermitAccess implements ParkingRule {
  id: ID!
  name: String!
  vehicles: [VehicleSelector!]!
  permit: Boolean!
}

extend type Mutation {
  createVehicleFilter(input: VehicleFilterCreateInput!): VehicleFilter!
  updateVehicleFilter(id: ID!, input: VehicleFilterUpdateInput!): VehicleFilter!
}
